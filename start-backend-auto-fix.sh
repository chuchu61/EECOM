#!/bin/bash

# Script t·ª± ƒë·ªông kh·∫Øc ph·ª•c v√† kh·ªüi ƒë·ªông backend
echo "ü§ñ AUTO-FIX & START BACKEND"
echo "============================"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

print_header() {
    echo -e "\n${CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo -e "${CYAN}$1${NC}"
    echo -e "${CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
}

print_step() {
    echo -e "\n${BLUE}üî∏ $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è $1${NC}"
}

# 1. MongoDB Fix
print_header "PHASE 1: FIXING MONGODB"
print_step "Ch·∫°y MongoDB fix script..."

# Cho ph√©p th·ª±c thi v√† ch·∫°y
chmod +x fix-mongodb.sh
if ./fix-mongodb.sh; then
    print_success "MongoDB ƒë√£ ƒë∆∞·ª£c s·ª≠a th√†nh c√¥ng!"
else
    print_error "MongoDB fix failed!"
    print_warning "Th·ª≠ kh·ªüi ƒë·ªông backend native mode thay th·∫ø..."
    
    print_header "FALLBACK: NATIVE PYTHON MODE"
    chmod +x start-backend-native.sh
    if ./start-backend-native.sh; then
        print_success "Backend started in native mode!"
        exit 0
    else
        print_error "T·∫•t c·∫£ methods ƒë·ªÅu failed. C·∫ßn support!"
        exit 1
    fi
fi

# 2. Backend Start
print_header "PHASE 2: STARTING BACKEND"

# ƒê·ª£i MongoDB ·ªïn ƒë·ªãnh
print_step "ƒê·ª£i MongoDB ·ªïn ƒë·ªãnh..."
sleep 5

# Th·ª≠ Docker simple method tr∆∞·ªõc
print_step "Th·ª≠ Docker simple method..."
chmod +x start-backend-simple.sh

# T·∫°m th·ªùi redirect ƒë·ªÉ ki·ªÉm tra output
if timeout 60 ./start-backend-simple.sh > /tmp/backend_start.log 2>&1; then
    print_success "Backend started v·ªõi Docker simple method!"
    
    # Hi·ªÉn th·ªã output cu·ªëi
    tail -20 /tmp/backend_start.log
    
elif [ $? -eq 124 ]; then
    print_warning "Docker method timeout, ki·ªÉm tra container..."
    
    # Ki·ªÉm tra container c√≥ ch·∫°y kh√¥ng
    if docker ps | grep -q ecom_backend; then
        print_success "Backend container ƒëang ch·∫°y!"
    else
        print_warning "Backend container kh√¥ng ch·∫°y, th·ª≠ native method..."
        
        print_header "FALLBACK: NATIVE PYTHON"
        chmod +x start-backend-native.sh
        ./start-backend-native.sh &
        NATIVE_PID=$!
        
        # ƒê·ª£i backend native start
        sleep 10
        
        if curl -s http://localhost:5000 > /dev/null 2>&1; then
            print_success "Backend started v·ªõi native method!"
        else
            print_error "Native method c≈©ng failed"
            kill $NATIVE_PID 2>/dev/null
            exit 1
        fi
    fi
    
else
    print_error "Docker simple method failed"
    print_step "Ki·ªÉm tra logs..."
    cat /tmp/backend_start.log | tail -20
    
    print_warning "Th·ª≠ native method..."
    print_header "FALLBACK: NATIVE PYTHON"
    chmod +x start-backend-native.sh
    ./start-backend-native.sh &
    NATIVE_PID=$!
    
    sleep 10
    if curl -s http://localhost:5000 > /dev/null 2>&1; then
        print_success "Backend started v·ªõi native method!"
    else
        print_error "T·∫•t c·∫£ methods failed!"
        kill $NATIVE_PID 2>/dev/null
        exit 1
    fi
fi

# 3. Final Testing
print_header "PHASE 3: FINAL VERIFICATION"

print_step "Testing API endpoints..."

# Test endpoints
endpoints=("/" "/health" "/api")
for endpoint in "${endpoints[@]}"; do
    print_step "Testing http://localhost:5000$endpoint"
    
    response=$(curl -s -w "%{http_code}" http://localhost:5000$endpoint)
    http_code="${response: -3}"
    body="${response%???}"
    
    if [ "$http_code" == "200" ]; then
        print_success "Endpoint $endpoint: OK"
        if command -v python3 &> /dev/null; then
            echo "$body" | python3 -m json.tool 2>/dev/null || echo "$body"
        else
            echo "$body"
        fi
    else
        print_error "Endpoint $endpoint: FAILED ($http_code)"
    fi
    echo ""
done

# 4. System Status
print_header "SYSTEM STATUS"

echo "üê≥ Docker Containers:"
docker ps | grep ecom || echo "Kh√¥ng c√≥ container n√†o"

echo ""
echo "üîå Port Status:"
netstat -tulpn 2>/dev/null | grep ":5000\|:27017" || ss -tulpn 2>/dev/null | grep ":5000\|:27017" || echo "Kh√¥ng detect ƒë∆∞·ª£c port"

echo ""
echo "üìä Services Health:"
if curl -s http://localhost:5000/health > /dev/null 2>&1; then
    echo "‚úÖ Backend: HEALTHY"
else
    echo "‚ùå Backend: DOWN"
fi

if docker ps | grep -q ecom_mongodb; then
    echo "‚úÖ MongoDB: RUNNING"
elif pgrep -f mongod > /dev/null; then
    echo "‚úÖ MongoDB: RUNNING (native)"
else
    echo "‚ùå MongoDB: DOWN"
fi

# 5. Final Instructions
print_header "SUCCESS! BACKEND IS RUNNING"

echo -e "${GREEN}üéâ Backend kh·ªüi ƒë·ªông th√†nh c√¥ng!${NC}"
echo ""
echo "üåê Truy c·∫≠p backend:"
echo "   ‚Ä¢ Homepage: ${CYAN}http://localhost:5000${NC}"
echo "   ‚Ä¢ Health Check: ${CYAN}http://localhost:5000/health${NC}"
echo "   ‚Ä¢ API Docs: ${CYAN}http://localhost:5000/api${NC}"
echo ""
echo "üìã Useful Commands:"
echo "   ‚Ä¢ Xem logs backend: ${YELLOW}docker logs ecom_backend${NC}"
echo "   ‚Ä¢ Xem logs MongoDB: ${YELLOW}docker logs ecom_mongodb${NC}"
echo "   ‚Ä¢ Restart backend: ${YELLOW}docker restart ecom_backend${NC}"
echo "   ‚Ä¢ Stop all: ${YELLOW}docker stop ecom_backend ecom_mongodb${NC}"
echo ""
echo "üõ†Ô∏è Troubleshooting:"
echo "   ‚Ä¢ Debug: ${YELLOW}./debug-backend.sh${NC}"
echo "   ‚Ä¢ MongoDB fix: ${YELLOW}./fix-mongodb.sh${NC}"
echo "   ‚Ä¢ Manual start: ${YELLOW}./start-backend-simple.sh${NC}"
echo ""
echo -e "${GREEN}‚ú® M·ªü browser v√† truy c·∫≠p: http://localhost:5000 ‚ú®${NC}"

# Cleanup temp files
rm -f /tmp/backend_start.log 