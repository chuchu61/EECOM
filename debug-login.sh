#!/bin/bash

# Script debug login process
echo "üîç DEBUGGING LOGIN PROCESS"
echo "=========================="

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

BACKEND_URL="http://localhost:5000"

print_step() {
    echo -e "\n${BLUE}üî∏ $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è $1${NC}"
}

print_info() {
    echo -e "${CYAN}‚ÑπÔ∏è $1${NC}"
}

# 1. Ki·ªÉm tra backend ƒëang ch·∫°y
print_step "1. Ki·ªÉm tra backend status..."
if curl -s "$BACKEND_URL" > /dev/null 2>&1; then
    print_success "Backend ƒëang ch·∫°y"
    
    # Ki·ªÉm tra mode
    response=$(curl -s "$BACKEND_URL")
    if echo "$response" | grep -q "emergency"; then
        print_warning "Backend ch·∫°y ·ªü EMERGENCY MODE"
        print_info "Emergency mode kh√¥ng h·ªó tr·ª£ authentication"
        echo ""
        echo "Emergency mode ch·ªâ c√≥ basic endpoints:"
        echo "  ‚Ä¢ / - Homepage"
        echo "  ‚Ä¢ /health - Health check"
        echo "  ‚Ä¢ /api - API info"
        echo "  ‚Ä¢ /status - Status"
        echo ""
        print_warning "ƒê·ªÉ c√≥ login, c·∫ßn ch·∫°y backend v·ªõi MongoDB"
        exit 1
    else
        print_success "Backend ch·∫°y ·ªü NORMAL MODE"
    fi
else
    print_error "Backend kh√¥ng ch·∫°y"
    echo "Kh·ªüi ƒë·ªông backend: ./start-backend-auto-fix.sh"
    exit 1
fi

# 2. Ki·ªÉm tra auth endpoints
print_step "2. Ki·ªÉm tra auth endpoints..."

endpoints=("/api/auth/register" "/api/auth/login")
for endpoint in "${endpoints[@]}"; do
    echo ""
    print_info "Testing $endpoint"
    
    response=$(curl -s -o /dev/null -w "%{http_code}" -X POST "$BACKEND_URL$endpoint" \
        -H "Content-Type: application/json" \
        -d '{}')
    
    if [ "$response" == "400" ]; then
        print_success "Endpoint $endpoint: AVAILABLE (400 = missing data)"
    elif [ "$response" == "500" ]; then
        print_error "Endpoint $endpoint: SERVER ERROR (MongoDB issue?)"
    else
        print_warning "Endpoint $endpoint: Status $response"
    fi
done

# 3. Test MongoDB connection qua health endpoint
print_step "3. Ki·ªÉm tra MongoDB connection..."
health_response=$(curl -s "$BACKEND_URL/health")
echo "$health_response" | python3 -m json.tool 2>/dev/null || echo "$health_response"

if echo "$health_response" | grep -q "connected"; then
    print_success "MongoDB connected"
elif echo "$health_response" | grep -q "error"; then
    print_error "MongoDB connection failed"
    print_warning "Login s·∫Ω kh√¥ng ho·∫°t ƒë·ªông without MongoDB"
else
    print_warning "MongoDB status unclear"
fi

# 4. Test register user
print_step "4. Test t·∫°o user m·ªõi..."

test_user_data='{
    "email": "testuser@example.com",
    "password": "testpassword123",
    "username": "testuser"
}'

echo "Testing register v·ªõi data:"
echo "$test_user_data" | python3 -m json.tool

register_response=$(curl -s -w "\n%{http_code}" -X POST "$BACKEND_URL/api/auth/register" \
    -H "Content-Type: application/json" \
    -d "$test_user_data")

status_code=$(echo "$register_response" | tail -1)
response_body=$(echo "$register_response" | head -1)

echo ""
echo "Register response:"
echo "$response_body" | python3 -m json.tool 2>/dev/null || echo "$response_body"
echo "Status: $status_code"

if [ "$status_code" == "201" ]; then
    print_success "User created successfully"
    USER_CREATED=true
elif [ "$status_code" == "409" ]; then
    print_info "User already exists (this is OK for testing)"
    USER_CREATED=true
else
    print_error "Failed to create user"
    USER_CREATED=false
fi

# 5. Test login
print_step "5. Test login..."

login_data='{
    "email": "testuser@example.com", 
    "password": "testpassword123"
}'

echo "Testing login v·ªõi data:"
echo "$login_data" | python3 -m json.tool

login_response=$(curl -s -w "\n%{http_code}" -X POST "$BACKEND_URL/api/auth/login" \
    -H "Content-Type: application/json" \
    -d "$login_data")

status_code=$(echo "$login_response" | tail -1)
response_body=$(echo "$login_response" | head -1)

echo ""
echo "Login response:"
echo "$response_body" | python3 -m json.tool 2>/dev/null || echo "$response_body"
echo "Status: $status_code"

# Ph√¢n t√≠ch k·∫øt qu·∫£ login
if [ "$status_code" == "200" ]; then
    print_success "LOGIN TH√ÄNH C√îNG!"
    
    # Extract access token
    access_token=$(echo "$response_body" | python3 -c "
import sys, json
try:
    data = json.load(sys.stdin)
    print(data.get('access_token', 'NOT_FOUND'))
except:
    print('PARSE_ERROR')
")
    
    if [ "$access_token" != "NOT_FOUND" ] && [ "$access_token" != "PARSE_ERROR" ]; then
        print_success "Access token received"
        
        # Test protected endpoint
        print_step "6. Test protected endpoint..."
        protected_response=$(curl -s -w "\n%{http_code}" -X GET "$BACKEND_URL/api/auth/protected" \
            -H "Authorization: Bearer $access_token")
        
        protected_status=$(echo "$protected_response" | tail -1)
        protected_body=$(echo "$protected_response" | head -1)
        
        echo "Protected endpoint response:"
        echo "$protected_body" | python3 -m json.tool 2>/dev/null || echo "$protected_body"
        echo "Status: $protected_status"
        
        if [ "$protected_status" == "200" ]; then
            print_success "Protected endpoint works"
        else
            print_error "Protected endpoint failed"
        fi
    fi
    
elif [ "$status_code" == "401" ]; then
    print_error "LOGIN FAILED: Invalid credentials"
    
elif [ "$status_code" == "402" ]; then
    print_error "LOGIN FAILED: User not active or team issues"
    print_warning "L√ù DO CH√çNH: User c·∫ßn c√≥ team_id v√† team ph·∫£i t·ªìn t·∫°i"
    echo ""
    print_info "Gi·∫£i ph√°p:"
    echo "1. T·∫°o team tr∆∞·ªõc"
    echo "2. Assign user v√†o team" 
    echo "3. Ho·∫∑c b·ªè logic ki·ªÉm tra team (development)"
    
elif [ "$status_code" == "400" ]; then
    print_error "LOGIN FAILED: Missing required fields"
    
elif [ "$status_code" == "500" ]; then
    print_error "LOGIN FAILED: Server error (likely MongoDB issue)"
    
else
    print_error "LOGIN FAILED: Unknown error (Status: $status_code)"
fi

# 6. Ki·ªÉm tra database collections
print_step "7. Database diagnosis..."
if docker ps | grep -q ecom_mongodb; then
    print_info "MongoDB container ƒëang ch·∫°y"
    
    # Ki·ªÉm tra collections
    echo ""
    print_info "Checking database collections..."
    
    # List databases
    docker exec ecom_mongodb mongosh --quiet --eval "
        show dbs
    " 2>/dev/null || docker exec ecom_mongodb mongo --quiet --eval "
        show dbs
    " 2>/dev/null
    
    # Check users collection
    echo ""
    print_info "Checking users collection..."
    docker exec ecom_mongodb mongosh --quiet --eval "
        use exp_ecom_db
        db.users.countDocuments()
    " 2>/dev/null || docker exec ecom_mongodb mongo --quiet --eval "
        use exp_ecom_db
        db.users.count()
    " 2>/dev/null
    
    # Check teams collection  
    echo ""
    print_info "Checking teams collection..."
    docker exec ecom_mongodb mongosh --quiet --eval "
        use exp_ecom_db
        db.teams.countDocuments()
    " 2>/dev/null || docker exec ecom_mongodb mongo --quiet --eval "
        use exp_ecom_db
        db.teams.count()
    " 2>/dev/null
    
else
    print_warning "MongoDB container kh√¥ng ch·∫°y"
fi

# 7. K·∫øt lu·∫≠n v√† ƒë·ªÅ xu·∫•t
echo ""
echo "=========================================="
print_step "üéØ CONCLUSION & RECOMMENDATIONS"
echo "=========================================="

if [ "$status_code" == "402" ]; then
    echo ""
    print_error "V·∫§N ƒê·ªÄ CH√çNH: USER AUTHENTICATION C·∫¶N TEAM_ID"
    echo ""
    print_info "Backend y√™u c·∫ßu:"
    echo "  ‚Ä¢ User ph·∫£i c√≥ team_id"
    echo "  ‚Ä¢ Team ph·∫£i t·ªìn t·∫°i trong database"
    echo ""
    print_warning "GI·∫¢I PH√ÅP:"
    echo "  1Ô∏è‚É£ T·∫°o team trong database"
    echo "  2Ô∏è‚É£ Assign user v√†o team"
    echo "  3Ô∏è‚É£ Ho·∫∑c t·∫°m th·ªùi b·ªè check team (dev mode)"
    
elif [ "$status_code" == "500" ]; then
    print_error "V·∫§N ƒê·ªÄ CH√çNH: MONGODB CONNECTION"
    echo ""
    print_warning "GI·∫¢I PH√ÅP:"
    echo "  1Ô∏è‚É£ Fix MongoDB: ./fix-mongodb.sh"
    echo "  2Ô∏è‚É£ Restart backend: ./start-backend-simple.sh"
    
elif [ "$status_code" == "200" ]; then
    print_success "LOGIN HO·∫†T ƒê·ªòNG B√åNH TH∆Ø·ªúNG!"
    echo ""
    print_info "C√≥ th·ªÉ v·∫•n ƒë·ªÅ ·ªü:"
    echo "  ‚Ä¢ Frontend kh√¥ng g·ª≠i ƒë√∫ng request"
    echo "  ‚Ä¢ CORS issues"
    echo "  ‚Ä¢ URL kh√¥ng ƒë√∫ng"
    
else
    print_warning "V·∫§N ƒê·ªÄ KH√îNG X√ÅC ƒê·ªäNH"
    echo ""
    print_info "C·∫ßn ki·ªÉm tra th√™m:"
    echo "  ‚Ä¢ Backend logs: docker logs ecom_backend"
    echo "  ‚Ä¢ Frontend console errors"
    echo "  ‚Ä¢ Network requests trong browser"
fi

echo ""
print_info "üìã Next steps ƒë·ªÉ fix login:"
echo "  ./fix-login-team-issue.sh   # T·∫°o team v√† assign user"
echo "  ./disable-team-check.sh     # T·∫°m b·ªè check team (dev)"
echo "  ./check-frontend-login.sh   # Debug frontend login" 